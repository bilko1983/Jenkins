@Library('mf-jenkins-shared-libraries') _

pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = "eu-west-1"
        ROLE_SESSION_NAME="jenkins-session"
        AWS_ROLE="ExternalAdminRole"
        AWS_ACCOUNT="953612792372"
    }
    parameters {
        choice(name: 'ENVIRONMENT', choices: HybrisGetEnvironments(), description: 'Choose environment')
    }
    stages {
        stage('Creating Test RDS Cluster') {
            steps {
                withAWS(role:"${AWS_ROLE}", roleAccount:"${AWS_ACCOUNT}", duration: 3600, roleSessionName: "${ROLE_SESSION_NAME}") {
                    sh """
                        LatestSnapShot=`aws rds describe-db-cluster-snapshots --db-cluster-identifier test --query='reverse(sort_by(DBClusterSnapshots, &SnapshotCreateTime))[0] |DBClusterSnapshotIdentifier' --output text`
                        aws rds restore-db-cluster-from-snapshot --db-cluster-identifier "${ENVIRONMENT}"-db-refresh --snapshot-identifier \$LatestSnapShot --vpc-security-group-ids "sg-6cb9b615" --engine aurora --engine-version 5.6.mysql_aurora.1.22.2 --db-subnet-group-name test-hyb-aurora-db-subnet-group --tags '[{\"Key\": \"Name\",\"Value\": \"db-refresh\"},{\"Key\": \"Owner\",\"Value\": \"DevOps\"}]' 
                        status=unknown
                        while [[ "\$status" != "available" ]]; do
                            sleep 60
                            status=`aws rds describe-db-clusters --db-cluster-identifier "${ENVIRONMENT}"-db-refresh --query DBClusters[*].Status --output text`
                        done
                    """
                }
            }
        }
        stage('Creating Test RDS Instance') {
            steps {
                withAWS(role:"${AWS_ROLE}", roleAccount:"${AWS_ACCOUNT}", duration: 3600, roleSessionName: "${ROLE_SESSION_NAME}") {
                    sh """
                        aws rds create-db-instance --db-cluster-identifier "${ENVIRONMENT}"-db-refresh --db-instance-identifier "${ENVIRONMENT}"-db-refresh-1 --db-instance-class db.r5.large --engine aurora --engine-version 5.6.mysql_aurora.1.22.2 --tags '[{\"Key\": \"Name\",\"Value\": \"db-refresh-instance\"},{\"Key\": \"Owner\",\"Value\": \"DevOps\"}]'
                        aws rds wait db-instance-available --db-instance-identifier "${ENVIRONMENT}"-db-refresh-1
                    """
                }
            }
        }
        stage('Exporting mysql dump') {
            steps {
                databaseExport("${ENVIRONMENT}")
            }
        }
        stage('Importing mysql Dump to Environment Database') {
            steps {
                databaseImport("${ENVIRONMENT}")
            }
        }
        stage('Removing RDS cluster') {
            steps {
                withAWS(role:"${AWS_ROLE}", roleAccount:"${AWS_ACCOUNT}", duration: 3600, roleSessionName: "${ROLE_SESSION_NAME}") {
                    sh """
                        aws rds delete-db-instance --db-instance-identifier "${ENVIRONMENT}"-db-refresh-1 --skip-final-snapshot
                        aws rds wait db-instance-deleted --db-instance-identifier "${ENVIRONMENT}"-db-refresh-1
                        aws rds delete-db-cluster --db-cluster-identifier "${ENVIRONMENT}"-db-refresh --skip-final-snapshot
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

def databaseExport(env) {
    withCredentials([usernamePassword(credentialsId: 'dbs-creds', passwordVariable: 'PASSWD', usernameVariable: 'USERNAME')]) {
        sh """mysqldump  -h '$env'-db-refresh.cluster-ro-ctm9wjkfghio.eu-west-1.rds.amazonaws.com -u $USERNAME -p$PASSWD --single-transaction --routines --triggers hybris --compress > '$env'_hybris.sql"""
    }
}

def databaseImport(env) {
    withCredentials([usernamePassword(credentialsId: 'dbs-creds', passwordVariable: 'PASSWD', usernameVariable: 'USERNAME')]) {
        sh """mysql -h hybris-development-instance-1.ctm9wjkfghio.eu-west-1.rds.amazonaws.com -u $USERNAME -p$PASSWD '$env'_hybris < '$env'_hybris.sql"""
    }
}