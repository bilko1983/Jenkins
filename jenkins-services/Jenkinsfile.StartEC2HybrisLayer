@Library('mf-jenkins-shared-libraries') _

pipeline {
    agent any
    environment {
        USER='centos'
        CREDENTIALID='dev-generic-key'
        CHEF_CLIENT_VERSION="12.9.38"
        CHEF_ENV="new-dev-env"
        ENVIRONMENT_KEY="dev_aws_private_key"
        AWS_DEFAULT_REGION = "eu-west-1"
        RDS_STATUS = AWSRdsGetClusterStatus("${AWS_ROLE}", "${AWS_ACCOUNT}", "${ENVIRONMENT}")
        ROLE_SESSION_NAME="jenkins-session"
        AWS_ROLE="ExternalAdminRole"
        AWS_ACCOUNT="953612792372"
    }
    parameters {
            choice(name: 'ENVIRONMENT', choices: HybrisGetEnvironments(), description: 'Choose environment')
        }
    options {
      timeout (time: 40, unit: 'MINUTES')
      disableConcurrentBuilds()
    }
    stages {
        stage('Starting DB'){
            when {
                anyOf {
                    environment name: "ENVIRONMENT", value: "regression"
                    environment name: "ENVIRONMENT", value: "integration"
                    environment name: "ENVIRONMENT", value: "dev2"
                    environment name: "ENVIRONMENT", value: "dev4"
                    environment name: "ENVIRONMENT", value: "dev5"
                    environment name: "ENVIRONMENT", value: "dev6"
                    environment name: "ENVIRONMENT", value: "dev8"
                }
                not { environment name: "RDS_STATUS", value: "available" }
            }
            options { retry(3) }
            steps {
                AWSRdsClusterStart("${AWS_ROLE}", "${AWS_ACCOUNT}", "${ENVIRONMENT}")
            }
        }
        stage('EC2 Instances Starting') {
            steps {
                withAWS(role:"${AWS_ROLE}", roleAccount:"${AWS_ACCOUNT}", duration: 900, roleSessionName: "${ROLE_SESSION_NAME}") {
                    AWSActionEC2Instance("start", "${ENVIRONMENT}-app*,${ENVIRONMENT}-man*,${ENVIRONMENT}-cron*,${ENVIRONMENT}-solr*,${ENVIRONMENT}-esb*")
                    sh 'sleep 60'
                }
            }
        }
        //stage('Chef Deregister Environment') {
            //steps {
                //ChefDeregisterEnv("${ENVIRONMENT}")
            //}
        //}
        stage('Get Environment DNS Records') {
            environment {
                HOSTED_ZONE_ID = AWSGetHostedZoneId("${AWS_ROLE}", "${AWS_ACCOUNT}", 'matcheslocal.com') // The ID is needed to get all DNS records for the environment.
            }
            steps {
                 withAWS(role:"${AWS_ROLE}", roleAccount:"${AWS_ACCOUNT}", duration: 900, roleSessionName: "${ROLE_SESSION_NAME}") {
                    // Cleaning all records from Chef for the environment
                    // Get all DNS's for the given environment and put them in a txt file. This will later be used by the 'Chef' function
                    sh "aws route53 list-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --query 'ResourceRecordSets[].Name' --output json | grep ${ENVIRONMENT}- | sed 's/,//g' | sed 's/\"//g' | sed 's/com./com/g' > ${ENVIRONMENT}_records.txt"
                    // Get all DNS's for the app nodes - used by HAproxyUpdate() below
                    sh "cat ${ENVIRONMENT}_records.txt | grep app | grep '[0-9].matches' > ${ENVIRONMENT}_app_records.txt"
                }
            }
        }
        stage('Chef base role Solr Master') {
            steps {
                ChefBootstrap("${ENVIRONMENT}_records.txt","${ENVIRONMENT}",'solr-master','role[aws-base],role[hybris-search-master]',"${CHEF_CLIENT_VERSION}")
            }
        }
        stage('Chef base role Solr Slave') {
            steps {
                ChefBootstrap("${ENVIRONMENT}_records.txt","${ENVIRONMENT}",'solr-slave','role[aws-base],role[hybris-search-slave]',"${CHEF_CLIENT_VERSION}")
            }
        }
        stage ('Chef base roles') {
            environment {
                ESB = FindStringInFile("${ENVIRONMENT}-esb-1", "${ENVIRONMENT}_records.txt")
                ESB_LEGACY = FindStringInFile("${ENVIRONMENT}-esb-legacy-1", "${ENVIRONMENT}_records.txt")
            }
            parallel {
                stage('Cron') {
                    steps {
                        ChefBootstrap("${ENVIRONMENT}_records.txt","${ENVIRONMENT}",'cron','role[aws-base],recipe[mf-nfs::default],role[hybris-cron-v3]',"${CHEF_CLIENT_VERSION}")
                    }
                }
                stage('App') {
                    steps {
                        ChefBootstrap("${ENVIRONMENT}_app_records.txt","${ENVIRONMENT}",'app','role[aws-base],role[hybris-store-v3]',"${CHEF_CLIENT_VERSION}")
                    }
                }
                stage('Man') {
                    steps {
                        ChefBootstrap("${ENVIRONMENT}_records.txt","${ENVIRONMENT}",'man','role[aws-base], role[hybris-management-v3], recipe[mf-nfs::mount-hybris-dataimport]',"${CHEF_CLIENT_VERSION}")
                    }
                }
                stage('ESB-LEGACY') {
                    when { environment name: "ESB_LEGACY", value: "true" }
                    steps {
                        ChefBootstrap("${ENVIRONMENT}_records.txt","${ENVIRONMENT}",'esb-legacy','role[aws-base], role[mule-server], role[activemq-server-v2], recipe[mf-nfs::mount-esb], recipe[mf-datadog::default]',"${CHEF_CLIENT_VERSION}")
                    }
                }
                stage('ESB') {
                    when { environment name: "ESB", value: "true" }
                    steps {
                        ChefBootstrap("${ENVIRONMENT}_records.txt","${ENVIRONMENT}",'esb','role[aws-base], role[mule-server-v3], role[activemq-server-v2], recipe[mf-nfs::mount-esb], recipe[mf-datadog::default]',"${CHEF_CLIENT_VERSION}")
                    }
                }
            }
        }
        stage('Hybris Restart') {
            environment {
                ESB = FindStringInFile("${ENVIRONMENT}-esb-1", "${ENVIRONMENT}_records.txt")
                ESB_LEGACY = FindStringInFile("${ENVIRONMENT}-esb-legacy-1", "${ENVIRONMENT}_records.txt")
            }
            parallel {
                stage('Hybris Restart - App') {
                    steps {
                        ChefServiceRestartAgainstNode("${CREDENTIALID}", "app", "${ENVIRONMENT}", "${CHEF_ENV}", "hybris")
                    }
                }
                stage('Hybris Restart - Man') {
                    steps {
                        ChefServiceRestartAgainstNode("${CREDENTIALID}", "man", "${ENVIRONMENT}", "${CHEF_ENV}", "hybris")
                    }
                }
                stage('Hybris Restart - Cron') {
                    steps {
                        ChefServiceRestartAgainstNode("${CREDENTIALID}", "cron", "${ENVIRONMENT}", "${CHEF_ENV}", "hybris")
                    }
                }
            }
        }
    }
}
