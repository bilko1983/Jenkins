@Library('mf-jenkins-shared-libraries@feature/no-chef-client') _

pipeline{
    agent any
    environment {
        CREDENTIALID        = "d2f9bd44-fb0c-4d5b-a31a-cd8adeefdf9f"
        CHEF_CLIENT_VERSION = "12.19.36"
        AWS_DEFAULT_REGION  = "eu-west-1"
        ENVIRONMENT         = "aws-prd"
        CHEF_ENVIRONMENT    = "AWS-PRD"
        SLACK_CHANNEL       = "prd-deployment"
        SLACK_DEVOPS        = "devops-priv"
    }
    parameters{
        booleanParam(name: 'SOLRMASTER', defaultValue: false, description: '')
        booleanParam(name: 'SOLRSLAVE-1', defaultValue: false, description: '')
        booleanParam(name: 'SOLRSLAVE-2', defaultValue: false, description: '')
        booleanParam(name: 'SOLRSLAVE-3', defaultValue: false, description: '')
        booleanParam(name: 'CRON-1', defaultValue: false, description: '')
        booleanParam(name: 'CRON-2', defaultValue: false, description: '')
        booleanParam(name: 'MAN-1', defaultValue: false, description: '')
        booleanParam(name: 'MAN-2', defaultValue: false, description: '')
        booleanParam(name: 'APP-1', defaultValue: false, description: '')
        booleanParam(name: 'APP-2', defaultValue: false, description: '')
        booleanParam(name: 'APP-3', defaultValue: false, description: '')
        booleanParam(name: 'APP-4', defaultValue: false, description: '')
        booleanParam(name: 'APP-9', defaultValue: false, description: '')
        booleanParam(name: 'DEPLOY-HYBRIS-CONTAINERS', defaultValue: false, description: 'Always select this option when running a full production deployment!')
        booleanParam(name: 'VARNISH', defaultValue: false, description: '')
        booleanParam(name: 'FASTLY-PURGE', defaultValue: false, description: '')
        booleanParam(name: 'CREATE-PRD-DB-SNAPSHOT', defaultValue: false, description: 'Select if you wish to create a new optimised snapshot of the PRD DB after this deployment')
        booleanParam(name: 'SMOKE-TEST', defaultValue: false, description: 'Select to trigger automated smoke tests via endtest.io')
        string(name: "BUILD", defaultValue: '', description: 'Build number for artifacts to deploy.')
    }
    stages{
        stage('Deployment Preparation'){
            steps{
                script {if (!env.BUILD){ error 'Build number has NOT been entered' }}
                // git branch: 'aws-prd', credentialsId: 'ccb1b731-1ec2-4c74-b4eb-83c8dd5bbb13', url: 'git@bitbucket.org:matchesfashion/deploy-hybris.git'
                git branch: 'feature/prod_docker_deploy', credentialsId: 'mf-svc-github', url: 'git@github.com:matchesfashion/deploy-hybris.git'
            }
        }
       
        stage ('Deploy Stage 1'){
            parallel {
                stage ('APP-9') {
                    agent any
                    when { environment name: "APP-9", value: "true" }
                    environment {
                        NODE = "app-9"
                        IP   = "10.5.5.64"
                    }
                    stages{
                        stage('Deploy'){
                            steps{                                
                                Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                                HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                            }
                        }
                        stage('QA'){
                            steps {
                                QAApproval("${SLACK_CHANNEL}","${BUILD}","${IP}","${NODE}")
                            }
                        }
                    }
                }
                stage ('CRON-1') {
                    agent any
                    when { environment name: "CRON-1", value: "true" }
                    environment {
                        NODE = "cron-1"
                        IP   = "10.5.3.102"
                    }
                    stages{
                        stage('Deploy'){
                            steps{
                                Slack("${SLACK_CHANNEL}","Please confirm `${NODE}` traffic has been redirected and no impacted Solr indexes or cron jobs are running <${BUILD_URL}input| here >")
                                input message: "Has the traffic on ${NODE} been redirected succesfully and no impacted Solr indexes or cron jobs are running?", ok: "yes"
                                Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                                HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                            }
                        }
                        stage('QA'){
                            steps {
                                QAApproval("${SLACK_CHANNEL}","${BUILD}","${IP}","${NODE}")
                            }
                        }
                    }
                }
                stage('SolrMaster'){
                    environment {
                        NODE = "solr-master"
                        IP   = "10.5.3.27"
                    }
                    when { environment name: 'SOLRMASTER', value: "true" }
                    steps{
                        SolrAction("${CREDENTIALID}","unmonitor","${IP}")
                        Slack("${SLACK_CHANNEL}", "Unmonitoring `${NODE}`")
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        SolrDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                        SolrAction("${CREDENTIALID}","monitor","${IP}")
                        Slack("${SLACK_CHANNEL}", "Monitoring `${NODE}`")
                    }
                }
            }
        }
        stage ('Deploy Stage 2') {
            parallel {
                stage('SolrSlave-1'){
                    environment {
                        NODE = "solr-slave-1"
                        IP   = "10.5.4.12"
                    }
                    when { environment name: 'SOLRSLAVE-1', value: "true" }
                    steps{
                        SolrAction("${CREDENTIALID}","unmonitor","${IP}")
                        Slack("${SLACK_CHANNEL}", "Unmonitoring `${NODE}`")
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        SolrDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                        SolrAction("${CREDENTIALID}","monitor","${IP}")
                        Slack("${SLACK_CHANNEL}", "Monitoring `${NODE}`")
                    }
                }
                stage('Man-1'){
                    agent any
                    when { environment name: "MAN-1", value: "true" }
                    environment {
                        NODE = "man-1"
                        IP   = "10.5.3.249"
                    }
                    stages {
                        stage ('Deploy') {
                            steps{
                                Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                                HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                                Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                            }
                        }
                        stage('QA'){
                            steps {
                                QAApproval("${SLACK_CHANNEL}","${BUILD}","${IP}","${NODE}")
                            }
                        }
                    }

                }
                stage('APP-1'){
                    environment {
                        NODE = "app-1"
                        IP   = "10.5.3.150"
                    }
                    when { environment name: "APP-1", value: "true" }
                    steps{
                        HAProxyUpdateStatus("${NODE}", "drain","${SLACK_DEVOPS}")
                        HAProxyUpdateStatus("${NODE}", "maint","${SLACK_DEVOPS}")
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                        HAProxyUpdateStatus("${NODE}", "ready","${SLACK_DEVOPS}")
                    }
                }
                stage('APP-4'){
                    environment {
                        NODE = "app-4"
                        IP   = "10.5.3.93"
                    }
                    when { environment name: "APP-4", value: "true" }
                    steps{
                        HAProxyUpdateStatus("${NODE}", "drain","${SLACK_DEVOPS}")
                        HAProxyUpdateStatus("${NODE}", "maint","${SLACK_DEVOPS}")
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                        HAProxyUpdateStatus("${NODE}", "ready","${SLACK_DEVOPS}")
                    }
                }
            }
        }
        stage ('Deploy Stage 3') {
            parallel {
                stage('APP-2'){
                    environment {
                        NODE = "app-2"
                        IP   = "10.5.4.25"
                    }
                    when { environment name: "APP-2", value: "true" }
                    steps{
                        HAProxyUpdateStatus("${NODE}", "drain","${SLACK_DEVOPS}")
                        HAProxyUpdateStatus("${NODE}", "maint","${SLACK_DEVOPS}")
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                        HAProxyUpdateStatus("${NODE}", "ready","${SLACK_DEVOPS}")
                    }
                }
                stage('SolrSlave-2'){
                    environment {
                        NODE = "solr-slave-2"
                        IP   = "10.5.5.92"
                    }
                    when { environment name: 'SOLRSLAVE-2', value: "true" }
                    steps{
                        SolrAction("${CREDENTIALID}","unmonitor","${IP}")
                        Slack("${SLACK_CHANNEL}", "Unmonitoring `${NODE}`")
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        SolrDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                        SolrAction("${CREDENTIALID}","monitor","${IP}")
                        Slack("${SLACK_CHANNEL}", "Monitoring `${NODE}`")
                    }
                }
            }
        }
        stage ('Deploy Stage 4'){
            parallel{
                stage('CRON-2'){
                    environment {
                        NODE = "cron-2"
                        IP   = "10.5.4.164"
                    }
                    when { environment name: "CRON-2", value: "true" }
                    steps{
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                    }
                }
                stage('SolrSlave-3'){
                    environment {
                        NODE = "solr-slave-3"
                        IP   = "10.5.3.123"
                    }
                    when { environment name: 'SOLRSLAVE-3', value: "true" }
                    steps{
                        SolrAction("${CREDENTIALID}","unmonitor","${IP}")
                        Slack("${SLACK_CHANNEL}", "Unmonitoring `${NODE}`")
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        SolrDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                        SolrAction("${CREDENTIALID}","monitor","${IP}")
                        Slack("${SLACK_CHANNEL}", "Monitoring `${NODE}`")
                    }
                }
                stage('APP-3'){
                    environment {
                        NODE = "app-3"
                        IP   = "10.5.5.9"
                    }
                    when { environment name: "APP-3", value: "true" }
                    steps{
                        HAProxyUpdateStatus("${NODE}", "drain","${SLACK_DEVOPS}")
                        HAProxyUpdateStatus("${NODE}", "maint","${SLACK_DEVOPS}")
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                        HAProxyUpdateStatus("${NODE}", "ready","${SLACK_DEVOPS}")
                    }
                }                
                stage('Man-2'){
                    environment {
                        NODE = "man-2"
                        IP   = "10.5.4.56"
                        }
                    when { environment name: "MAN-2", value: "true" }
                    steps{
                        Slack("${SLACK_CHANNEL}", "Deploying build *[${BUILD}]* to `${NODE}` [${IP}]")
                        HybrisProdDeploy("${CREDENTIALID}","${BUILD}","${IP}","${NODE}")
                        Slack("${SLACK_CHANNEL}", "Successfully deployed build *[${BUILD}]* to `${NODE}` [${IP}] :white_check_mark:")
                    }
                }
            }
        }        
        stage('Reastart Varnish'){
            when { environment name: 'VARNISH', value: "true" }
            steps{
               Slack("${SLACK_CHANNEL}", "Restarting `Varnish`")
               build (job:'restart-varnish', wait: true)
               Slack("${SLACK_CHANNEL}", "Restarted Varnish :white_check_mark:")
            }
        }
        stage('Fastly Purge'){
            when { environment name: 'FASTLY-PURGE', value: "true" }
            steps{
                build (job:'fastly_purge_service', wait: true, parameters:[
                    [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: "www-prd"]])
                Slack("${SLACK_CHANNEL}", "Fastly cache purged successfully :white_check_mark:")
            }
        }
        stage('Create Optimised Production DB Snapshot'){
            when { environment name: 'CREATE-PRD-DB-SNAPSHOT', value: "true" }
            steps{
                GitHubInvokeDBSnapshot()
                echo "The Snapshot pipeline has been triggered in Github, please monitor slack channel #platform-auto-info for progress"
            }
        }
        stage('Deploying Containers'){
            when { environment name: 'DEPLOY-HYBRIS-CONTAINERS', value: "true" }
            steps{
                GitHubInvokeHybrisDeploy()
            }
        }
        stage ('QA Smoke Tests') {
            when { environment name: 'SMOKE-TEST', value: "true" }
            steps {
                Slack("${SLACK_CHANNEL}", "Triggering Smoke Tests :white_check_mark:")
                HybrisSmokeTest()
            }
        }
    }
    post {
        failure {
            Slack("${SLACK_DEVOPS}",":x: Deployment failure\nLogs can be seen <$BUILD_URL/console|*here*>")
        }
        aborted {
            Slack("${SLACK_CHANNEL}",":bangbang: Deployment cancelled\nLogs can be seen <$BUILD_URL/console|*here*>")
        }
    }
}

def GitHubInvokeHybrisDeploy() {
    withCredentials([string(credentialsId: 'github_API_token', variable: 'TOKEN')]) {
    sh """
        curl --location --request POST 'https://api.github.com/repos/matchesfashion/hybris-docker/actions/workflows/PROD_hybris-docker-build.yml/dispatches' \
        --header 'Accept: application/vnd.github.v3+json' \
        --header 'Authorization: Bearer ${TOKEN}' \
        --header 'Content-Type: application/json' \
        -d "{ \\"ref\\": \\"master\\", \\"inputs\\": {\\"build\\":\\"\${BUILD}\\"} }"
    """
    }
}
